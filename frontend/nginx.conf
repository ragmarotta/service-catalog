# Define um bloco de servidor que escuta na porta 80 (padrão HTTP).
server {
    listen 80;
    server_name localhost;

    # Define a pasta raiz de onde o Nginx deve servir os arquivos estáticos.
    # Corresponde à pasta para onde copiamos os arquivos do React no Dockerfile.
    root /usr/share/nginx/html;
    # Define os arquivos de índice padrão.
    index index.html index.htm;

    # --- Rota para a API (Proxy Reverso) ---
    # Esta é a configuração mais importante para a comunicação entre frontend e backend.
    location /api/ {
        # Todas as requisições que o frontend fizer para, por exemplo, '/api/users',
        # serão interceptadas pelo Nginx e redirecionadas para o serviço de backend.
        # 'http://backend:8000' usa o nome do serviço 'backend' definido no docker-compose.yml,
        # que o Docker resolve para o IP interno do contêiner do backend na porta 8000.
        proxy_pass http://backend:8000;
        
        # Cabeçalhos importantes para garantir que a aplicação backend receba
        # as informações corretas sobre a requisição original do cliente.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # --- Rota para a Aplicação React ---
    # Este bloco captura todas as outras requisições.
    location / {
        # O 'try_files' é essencial para o funcionamento de Single-Page Applications (SPAs) como o React.
        # 1. Ele primeiro tenta encontrar um arquivo que corresponda exatamente à URL (ex: /logo.png).
        # 2. Se não encontrar, tenta encontrar uma pasta com esse nome.
        # 3. Se falhar novamente, em vez de retornar um erro 404, ele serve o arquivo /index.html.
        # Isso permite que o roteador do React (React Router) assuma o controlo e exiba a página correta
        # para rotas como '/resources' ou '/admin/users', que não existem como arquivos físicos no servidor.
        try_files $uri $uri/ /index.html;
    }

    # Tratamento de erros genérico.
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
